# Generated by Django 4.0.1 on 2022-01-30 10:37

import address.models
from django.db import migrations, models
import django.db.models.deletion
import inscription.utils
import multiselectfield.db.fields
import phonenumber_field.modelfields
import csv
SPES = (
    ('ARTCIN', 'Cinéma', '1', 'art'),
    ('ARTTHEA', 'Théâtre', '1', 'art'),
    ('ARTMUS', 'Musique', '1', 'art'),
    ('ARTPLA', 'Arts plastiques', '1', 'art'),
    ('HISTGEO', 'Histoire-Géo-Pol', '1', None),
    ('MATH', 'Mathématiques', '1', None),
    ('HUMPHI', 'Humanités, littérature et philosophie', '2', None),
    ('PHYCHI', 'Physique-Chimie', '2', None),
    ('ECOSOC', 'Sciences économiques et sociales', '2', None),
    ('SVT', 'Sciences de la vie et de la terre', '3', None),
    ('LLCERANG', 'Anglais', '3', 'LLCE'),
    ('LLCERESP ', 'Espagnol', '3', 'LLCE'),
    ('ARTCIRQ', 'Arts du cirque', None, 'art'),
    ('ARTHIST', 'Histoire des arts', None, 'art'),
    ('ARTDAN', 'Danse', None, 'art'),
    ('BIOLO', 'Biologie - écologie', None, None),
    ('SCING', "Sciences de l'ingénieur", None, None),
    ('LLCERANGMC', 'Anglais monde contemporain', None, 'LLCE'),
    ('LLCERALL', 'Allemand', None, 'LLCE'),
    ('NUMINF', 'Numérique et sciences informatiques', None, None),
)

def import_spe(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    importation = []
    # Spécialités
    Spe = apps.get_model("inscription", "Spe")
    for spe in SPES:
        code, intitule, groupe, te = spe
        importation.append(Spe(code=code, intitule=intitule, groupe=groupe, type=te))
    Spe.objects.using(db_alias).bulk_create(importation)
    importation.clear()
    # Sociopro
    Sociopro = apps.get_model("inscription", "Sociopro")
    with open('inscription/data/sociopro.csv', "r") as csv_file:
        data = list(csv.reader(csv_file, delimiter=";"))
        for row in data:
            importation.append(Sociopro(code=row[0], name=row[1]))
    Sociopro.objects.using(db_alias).bulk_create(importation)
    importation.clear()
    # Pays
    Pays = apps.get_model("inscription", "Pays")
    with open('inscription/data/pays.csv', "r") as csv_file:
        data = list(csv.reader(csv_file, delimiter=";"))
        for row in data:
            importation.append(Pays(code=row[0], name=row[1]))
    Pays.objects.using(db_alias).bulk_create(importation)
    importation.clear()
    # Départements
    Departement = apps.get_model("inscription", "Departement")
    with open('inscription/data/departement.csv', "r") as csv_file:
        data = list(csv.reader(csv_file, delimiter=";"))
        for row in data:
            importation.append(Departement(code=row[0], name=row[1]))
    Departement.objects.using(db_alias).bulk_create(importation)
    importation.clear()
    # Communes
    Commune = apps.get_model("inscription", "Commune")
    with open('inscription/data/commune.csv', "r") as csv_file:
        data = list(csv.reader(csv_file, delimiter=";"))
        for row in data:
            if row[0][:2] == '97':
                dep_code = row[0][:3]
            else:
                dep_code = '0'+row[0][:2]
            departement = Departement.objects.get(code=dep_code)
            importation.append(Commune(code=row[0], name=row[1], departement=departement))
            Commune.objects.using(db_alias).bulk_create(importation)
            importation.clear()

def delete_spe(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    Spe = apps.get_model("inscription", "Spe")
    Spe.objects.using(db_alias).delete()
    Sociopro = apps.get_model("inscription", "Sociopro")
    Sociopro.objects.using(db_alias).delete()
    Pays = apps.get_model("inscription", "Pays")
    Pays.objects.using(db_alias).delete()
    Departement = apps.get_model("inscription", "Departement")
    Departement.objects.using(db_alias).delete()
    Commune = apps.get_model("inscription", "Commune")
    Commune.objects.using(db_alias).delete()

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('address', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Departement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=4, verbose_name='Code INSEE')),
                ('name', models.CharField(max_length=50, verbose_name='Département')),
            ],
        ),
        migrations.CreateModel(
            name='Pays',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=4, verbose_name='Code INSEE')),
                ('name', models.CharField(max_length=50, verbose_name='Département')),
            ],
        ),
        migrations.CreateModel(
            name='Sociopro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=4, verbose_name='Code Sociopro')),
                ('name', models.CharField(max_length=100, verbose_name='Catégorie sociopro')),
            ],
        ),
        migrations.CreateModel(
            name='Spe',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, verbose_name='Code Spé')),
                ('intitule', models.CharField(max_length=50, verbose_name='Intitulé Spé')),
                ('groupe', models.CharField(blank=True, max_length=2, null=True, verbose_name='Groupe Spé')),
                ('type', models.CharField(blank=True, max_length=10, null=True, verbose_name='Type Spé')),
            ],
        ),
        migrations.CreateModel(
            name='Commune',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=6, verbose_name='Code INSEE')),
                ('name', models.CharField(max_length=50, verbose_name='Commune')),
                ('departement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inscription.departement', verbose_name='Département')),
            ],
        ),
        migrations.CreateModel(
            name='BaseEleve',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_naissance', models.DateField(verbose_name='Date de naissance')),
                ('ville_natale', models.CharField(blank=True, max_length=50, null=True, verbose_name='Ville natale')),
                ('civility', models.CharField(choices=[('M.', 'M.'), ('MME', 'Mme')], default='M.', help_text="Quel sexe t'est attribué dans les documents administratifs ?", max_length=3, verbose_name='Civilité')),
                ('genre', models.CharField(choices=[('il', 'il'), ('elle', 'elle'), ('iel', 'iel')], default='Iel', help_text="Veux-tu que l'on parle de toi en disant il, elle ou iel ?", max_length=5, verbose_name='Pronom')),
                ('nom', models.CharField(max_length=255, verbose_name='Nom de famille')),
                ('prenom', models.CharField(max_length=255, verbose_name='Prénom')),
                ('nom_usage', models.CharField(blank=True, help_text='Souhaites-tu être appelé par un nom différent de ton prénom ?', max_length=255, null=True, verbose_name="Nom d'usage")),
                ('email', models.EmailField(max_length=255, verbose_name='Email')),
                ('telephone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Téléphone')),
                ('comments', models.TextField(blank=True, null=True, verbose_name='Commentaires')),
                ('hash', models.CharField(default=inscription.utils.create_hash, max_length=30, unique=True)),
                ('photo', models.ImageField(null=True, upload_to=inscription.utils.nom_photo)),
                ('resp1', models.CharField(choices=[('pere', 'Père'), ('mere', 'Mère'), ('autre', 'Autre responsable légal ou référent')], default='mere', max_length=5, verbose_name='Responsable 1')),
                ('nom_resp1', models.CharField(max_length=255, verbose_name='Nom de famille')),
                ('prenom_resp1', models.CharField(max_length=255, verbose_name='Prénom')),
                ('email_resp1', models.EmailField(max_length=255, verbose_name='Email')),
                ('tel_resp1', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Numéro de téléphone')),
                ('resp2', models.CharField(choices=[('pere', 'Père'), ('mere', 'Mère'), ('autre', 'Autre responsable légal ou référent'), ('aucun', 'Aucun')], default='pere', max_length=5, verbose_name='Responsable 2')),
                ('nom_resp2', models.CharField(blank=True, max_length=255, null=True, verbose_name='Nom de famille')),
                ('prenom_resp2', models.CharField(blank=True, max_length=255, null=True, verbose_name='Prénom')),
                ('email_resp2', models.EmailField(blank=True, max_length=255, null=True, verbose_name='Email')),
                ('tel_resp2', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=128, null=True, region=None, verbose_name='Numéro de téléphone')),
                ('dys', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('DL', 'Dyslexie'), ('DC', 'Dyscalculie'), ('DP', 'Dyspraxie'), ('DG', 'Dysgraphie'), ('DO', 'Dysorthographie')], max_length=14, null=True, verbose_name='Troubles cognitifs')),
                ('niveau', models.CharField(choices=[('premiere', 'Première'), ('deter', 'Détermination (2nde)'), ('term', 'Terminale'), ('crepa', 'CREPA')], default='deter', max_length=10, verbose_name="Niveau d'inscription")),
                ('address', address.models.AddressField(on_delete=django.db.models.deletion.CASCADE, related_name='eleve', to='address.address', verbose_name='Adresse')),
                ('adresse_resp1', address.models.AddressField(on_delete=django.db.models.deletion.CASCADE, related_name='resp1', to='address.address', verbose_name='Adresse')),
                ('adresse_resp2', address.models.AddressField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resp2', to='address.address', verbose_name='Adresse')),
                ('commune_naissance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inscription.commune', verbose_name='Commune de naissance')),
                ('departement_naissance', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='inscription.departement', verbose_name='Département de naissance')),
                ('nationalite', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='nationalite', to='inscription.pays', verbose_name='Nationalité')),
                ('pays_naissance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inscription.pays', verbose_name='Pays de naissance')),
                ('sociopro_resp1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resp1', to='inscription.sociopro', verbose_name='Profession')),
                ('sociopro_resp2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resp2', to='inscription.sociopro', verbose_name='Profession')),
                ('spe1', models.ManyToManyField(blank=True, limit_choices_to={'groupe': '1'}, related_name='spe1', to='inscription.Spe')),
                ('spe2', models.ManyToManyField(blank=True, limit_choices_to={'groupe': '2'}, related_name='spe2', to='inscription.Spe')),
                ('spe3', models.ManyToManyField(blank=True, limit_choices_to={'groupe': '3'}, related_name='spe3', to='inscription.Spe')),
            ],
        ),
        migrations.RunPython(import_spe,delete_spe),
    ]
